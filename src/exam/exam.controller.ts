import { Response, Body, Controller, HttpException, HttpStatus, Param, Post, UploadedFile, UseGuards, UseInterceptors, ParseIntPipe } from '@nestjs/common';
import { ExamService } from './exam.service';
import { FileInterceptor } from '@nestjs/platform-express';
import { BaseListFilterDto } from 'src/common/base/base.list';
import { PayloadTokenInterface, ResponseInterface } from 'src/common/interface';
import { Exam } from './exam.entity';
import { JwtAuthGuard } from 'src/auth/guards/auth-jwt.guards';
import { CurrentUser } from 'src/auth/decorator/user.decorator';
import { ExamAutoGenerateDto, ExamEndDto, UpdateLogExamDto } from './dto';
import { Response as Res } from 'express';

@Controller('exam')
@UseGuards(JwtAuthGuard)
export class ExamController {
    constructor(private readonly examService: ExamService) { }

    @Post('/upload')
    @UseInterceptors(FileInterceptor('file'))
    async uploadExam(@UploadedFile() file: Express.Multer.File, @Body() body: any) {
        console.log('upload', file)
        console.log('hehe', file.path)
        // let a = await this.examService.handleUploadExcel(file)
        // return {
        //     a
        // }
    }

    // @Post('/auto-generate')
    // async autoGenerate(@Body() body: ExamAutoGenerateDto, @CurrentUser() user: PayloadTokenInterface): Promise<ResponseInterface<Exam>> {
    //     try {
    //         let { error, data } = await this.examService.autoGenerateExam(user, body)
    //         if (error) {
    //             throw new HttpException(error, HttpStatus.BAD_REQUEST)
    //         }
    //         return {
    //             code: HttpStatus.OK,
    //             success: true,
    //             ...data
    //         }
    //     } catch (error) {
    //         if (error instanceof HttpException) throw error
    //         throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR)
    //     }
    // }

    @Post('/:slug/start')
    async startExam(@Body() body: any, @Param("slug") slug: string, @CurrentUser() user: PayloadTokenInterface): Promise<any> {
        try {
            let { error, data } = await this.examService.startExam(slug, user, body)
            if (error) {
                throw new HttpException(error, HttpStatus.BAD_REQUEST)
            }
            return {
                code: HttpStatus.OK,
                success: true,
                ...data
            }
        } catch (error) {
            if (error instanceof HttpException) throw error
            throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR)
        }
    }


    @Post('/:slug/end')
    async endExam(@Body() body: ExamEndDto, @Param("slug") slug: string, @CurrentUser() user: PayloadTokenInterface): Promise<any> {
        try {
            let { error, data } = await this.examService.endExam(slug, user, body)
            if (error) {
                throw new HttpException(error, HttpStatus.BAD_REQUEST)
            }
            return {
                code: HttpStatus.OK,
                success: true,
                ...data
            }
        } catch (error) {
            if (error instanceof HttpException) throw error
            throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR)
        }
    }


    @Post('/update-log/:exam_id')
    async updateLogExam(@Param("exam_id", ParseIntPipe) exam_id: number, @Body() body: UpdateLogExamDto, @CurrentUser() user: PayloadTokenInterface): Promise<any> {
        try {
            let { error, data } = await this.examService.updateLog(exam_id, body, user)
            if (error) {
                throw new HttpException(error, HttpStatus.BAD_REQUEST)
            }
            return {
                code: HttpStatus.OK,
                success: true,
                ...data
            }
        } catch (error) {
            if (error instanceof HttpException) throw error
            throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR)
        }
    }

}
