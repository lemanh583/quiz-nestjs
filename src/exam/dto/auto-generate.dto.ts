import { ApiProperty } from "@nestjs/swagger";
import { Type } from "class-transformer";
import { IsInt, IsArray, ArrayNotEmpty, IsOptional, IsEnum, Min, Max, ArrayMinSize, ValidateNested, Validate, ValidationArguments, ValidatorConstraintInterface, ValidatorConstraint } from "class-validator"
import { ExamLangType } from "src/common/enum/exam.enum";

export class CategoriesElementAutoGenerate {
  @ApiProperty()
  @IsInt()
  @Min(1)
  @Max(100)
  percent: number

  @ApiProperty()
  @IsInt()
  @Min(0)
  category_id: number
}


@ValidatorConstraint()
class validatePercentSum implements ValidatorConstraintInterface {
  validate(categories: CategoriesElementAutoGenerate[], validationArguments: ValidationArguments) {
    const sum = categories?.reduce((total, category) => total + category.percent, 0);
    if (sum > 100) return false
    return true
  }
}

export class ExamAutoGenerateDto {
  @ApiProperty({ description: "Mảng object id và phần trăm của category, Tổng số % không vượt quá 100" })
  @IsArray()
  @ArrayNotEmpty()
  // @ArrayMinSize(3)
  @ValidateNested({ each: true })
  @Type(() => CategoriesElementAutoGenerate)
  @Validate(validatePercentSum, { message: "The sum of percent values must be equal to 100%" })
  categories: CategoriesElementAutoGenerate[];

  @ApiProperty({ required: false, description: "Bài thi tiếng anh -- optional" })
  @IsOptional()
  @IsEnum({ enum: ExamLangType })
  lang_type?: ExamLangType

  @ApiProperty({ required: false, description: "Số lượng câu hỏi generate - optional - mặc định 60" })
  @IsOptional()
  @IsInt()
  @Min(20)
  total_question?: number

  @ApiProperty({ required: false })
  @IsOptional()
  @IsInt()
  topic_id?: number


  @IsOptional()
  @IsInt()
  total_work?: number

}


